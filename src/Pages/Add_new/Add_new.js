import React, { useState, useEffect } from 'react'

//css
import classes from "./Add_new.module.css"

//components
import Nav from "../../Shared components/Nav/Nav"
import Input from "./Components/Input/Input"
import OptionSelect from "./Components/Option_select/Option_select"
import NavigationButtons from "../Auth/Components/Form/Components/Navigation_buttons/Navigation_buttons"

//util
import colours from '../../util/colours'

//external
import { useDispatch, useSelector } from "react-redux"

//functions
import handle_form_navigation from "./Functions/handle_form_navigation"
import handle_dynamic_button_display from './Functions/handle_dynamic_button_display'

//redux action creators
import { clear_response } from "../../Store/Actions/0_submit_form_action"

export const Add_new = () => {

    //-config
    const dispatch = useDispatch()//initialize the usedispatch hook

    //?selectors
    const response = useSelector(state => state.form.response)//grab the form submission response from the reducer

    //*states
    const [current_step, set_current_step] = useState("selection")//state to hold the current step of the form
    const [show_form_navigation_buttons, set_show_form_navigation_buttons] = useState(false)//show different buttons depending on input
    const [form_type, set_form_type] = useState(null)//hold the type of form (note or collection) - set by the optionsSelect component
    const [form_data, set_form_data] = useState({// a state to hold the note information to be submitted to the backend

        title: null,
        subject: null,
        search_tags: [],//used to make searching easier and faster
        body: null,
        syntax: null,//stores the syntax NOTE ONLY
        notes: []//holds an array of notes collection ONLY

    })

    const handle_dynamic_data = form_step => {

        switch (form_step) {

            case "selection":

                return ["What would you like to add ?", null]

            case "title":

                return ["What's the title ?", `TITLE OF ${form_type.toUpperCase()}`]

            case "body":

                return ["What's it about ?", `BODY OF ${form_type.toUpperCase()}`]

            case "optionals":

                return ["Optional extra information", `SUBJECT OF ${form_type.toUpperCase()}`, `TAGS FOR EASIER SEARCHING`]

            case "syntax":

                return ["Optional syntax", `SYNTAX OF NOTE`]

            default: return
        }
    }

    const data = handle_dynamic_data(current_step)//call the function to generate the data based on what the form step is

    const handle_selection = (option) => {

        set_form_type(option)
        set_current_step("title")
        set_show_form_navigation_buttons("back")

    }

    useEffect(() => { handle_dynamic_button_display(form_type, form_data, current_step, set_show_form_navigation_buttons) }, [form_data, current_step])

    //this effect listens for the check note title, then navigates to the next step upon successful response 
    useEffect(() => {

        /* These responses are generated by the handle_form_navigation helper function*/

        if (response && response.data.message === "Title is okay") {//if the email has been checked and is okay
            set_current_step("body")//move onto the next step
            dispatch(clear_response())//and clear the response
        }

        // eslint-disable-next-line
    }, [response])

    return (

        <div className={classes.container}>

            <span className={classes.title} style={{ color: current_step === "optionals" || current_step === "syntax" ? "grey" : colours.primary }}>{data[0]}</span>

            {!form_type && <OptionSelect handle_selection={(option) => handle_selection(option)} />}

            {form_type &&

                current_step === "title" ?
                <Input description={data[1]} value={form_data.title} handle_input={e => set_form_data({ ...form_data, title: e.target.value })} />

                : current_step === "body" ?

                    <Input description={data[1]} value={form_data.body} text_area handle_input={e => set_form_data({ ...form_data, body: e.target.value })} />

                    : current_step === "optionals" ?

                        <div>
                            <Input description={data[1]} grey value={form_data.subject} handle_input={e => set_form_data({ ...form_data, subject: e.target.value })} />
                            <Input description={data[2]} grey marginTop="10px" value={form_data.search_tags} handle_input={e => set_form_data({ ...form_data, search_tags: e.target.value })} />
                        </div>

                        : current_step === "syntax" ?

                            <Input description={data[1]} grey value={form_data.syntax} text_area handle_input={e => set_form_data({ ...form_data, body: e.target.value })} />

                            : null}

            {//Form navigation buttons
                show_form_navigation_buttons &&//if the form has been selected

                <NavigationButtons //show the navigation buttons
                    width="275px"
                    marginTop="30px"
                    type={show_form_navigation_buttons}
                    on_click={(direction) => handle_form_navigation(direction, set_form_type, set_show_form_navigation_buttons, current_step, set_current_step, form_data, dispatch)
                    }
                />

            }

            <Nav />

        </div>

    )

}

export default Add_new