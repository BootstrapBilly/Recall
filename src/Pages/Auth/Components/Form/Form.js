import React, { useState, useEffect } from 'react'

//css
import classes from './Form.module.css'

//components
import Input from "./Components/Input/Input"
import Button from "./Components/Button/Button"
import NavigationButtons from "./Components/Navigation_buttons/Navigation_buttons"

//redux hooks
import { useSelector, useDispatch } from "react-redux"

//redux action creators
import { clear_response } from "../../../../Store/Actions/0_submit_form_action"

//functions
import handle_dynamic_button_display from "./Functions/handle_dynamic_button_display"
import handle_form_navigation from "./Functions/handle_form_navigation"

export const Form = props => {

    //-config
    const dispatch = useDispatch()

    //?Selectors
    const response = useSelector(state => state.form.response)//grab the response from the form

    //*states
    const [keyboard_open, set_keyboard_open] = useState(false)//detect whether the keyboard is open, and move the form down (for mobile)
    const [show_submit_button, set_show_submit_button] = useState(false)//decide whether to show the submit button (changed by)

    //only used for manual signup
    const [manual_signup_form_step, set_manual_signup_form_step] = useState("email")//store the current stage of the signup form
    const [show_form_navigation_buttons, set_show_form_navigation_buttons] = useState(false)//show the next form navigation buttons after filling in username and password

    const [user_details, set_user_details] = useState({//stores the user details and controls each input in the form
        email: "",
        username: "",
        password: "",
        repeat_password: ""
    })

    //when the input changes, scan them and decide what navigation buttons to display
    useEffect(() => {

        handle_dynamic_button_display(props.form_type, user_details, set_show_submit_button, manual_signup_form_step, set_show_form_navigation_buttons)

    }, [user_details, manual_signup_form_step])

    //this effect listens for the check email and check username responses, then navigates to the next step upon successful reponse 
    useEffect(() => {

        /* These responses are generated by the handle_form_navigation helper function*/

        if (response && response.data.message === "Email is okay") {//if the email has been checked and is okay
            set_manual_signup_form_step("username")//move onto the next step
            dispatch(clear_response())//and clear the response
        }

        if (response && response.data.message === "Username is okay") {//if the username has been checked and is okay
            set_manual_signup_form_step("password")//move onto the next step
            dispatch(clear_response())//and clear the response
        }

    }, [response])

    console.log(props.form_type)
    return (

        <div className={[classes.container, !props.form_type && classes.container_hidden, keyboard_open && classes.container_focused].join(" ")}>

            {//email input (email or username if the form type is login)

                (props.form_type === "login" || (props.form_type === "signup" && manual_signup_form_step === "email")) &&

                <Input

                    test_handle="form_email_input"
                    label={props.form_type === "login" ? "EMAIL OR USERNAME" : "EMAIL"}
                    type={"text"}
                    onChange={(e) => set_user_details({ ...user_details, email: e.target.value })}
                    toggle_keyboard_open={() => set_keyboard_open(!keyboard_open)}
                    value={user_details.email}
                />
            }

            {//username input

                ((props.form_type === "signup" && manual_signup_form_step === "username") || props.form_type === "facebook") &&

                <Input

                    test_handle="form_username_input"
                    label={"USERNAME"}
                    type={"text"}
                    onChange={(e) => set_user_details({ ...user_details, username: e.target.value })}
                    toggle_keyboard_open={(status) => set_keyboard_open(status)}
                    value={user_details.username}
                />
            }

            {//password input

                (props.form_type === "login" || (props.form_type === "signup" && manual_signup_form_step === "password")) &&

                <Input

                    test_handle="form_password_input"
                    label={"PASSWORD"}
                    type={"password"}
                    onChange={(e) => set_user_details({ ...user_details, password: e.target.value })}
                    toggle_keyboard_open={() => set_keyboard_open(!keyboard_open)}
                    value={user_details.password}
                />
            }

            {//repeat password input

                props.form_type === "signup" && manual_signup_form_step === "password" &&

                <Input

                    test_handle="form_repeat_password_input"
                    label={"REPEAT PASSWORD"}
                    type={"password"}
                    onChange={(e) => set_user_details({ ...user_details, repeat_password: e.target.value })}
                    toggle_keyboard_open={() => set_keyboard_open(!keyboard_open)}
                    value={user_details.repeat_password}
                />

            }


            {/* Navigation buttons */

                show_form_navigation_buttons &&

                <NavigationButtons
                    type={show_form_navigation_buttons}
                    on_click={(direction) => handle_form_navigation(direction, manual_signup_form_step, set_manual_signup_form_step, user_details, dispatch)}
                />

            }

            {/* Signup/login button */

                show_submit_button &&

                <Button test_handle="login_button"
                    text={(props.form_type === "signup" || props.form_type === "facebook") ? "SIGN UP" : "LOG IN"}
                    onClick={props.form_type === "facebook" ? props.handle_facebook_signup.bind(this, user_details.username)
                        : props.handle_submit.bind(this, user_details)}
                />

            }

            {/* Error message */}

            <span test_handle="form_validation_error" className={classes.error_message} style={{ display: !response && "none" }}>

                {response && response.data.message}

            </span>

        </div>

    )

}

export default Form

